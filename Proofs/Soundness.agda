module Proofs.Soundness where

open import Data.Bool renaming (Bool to ùîπ)
open import Data.List
open import Data.Maybe
open import Data.Nat
open import Relation.Binary.PropositionalEquality hiding ([_])

open import Expression.Compiler
open import Expression.Evaluator
open import Interpreter.Executor

{-
Proves that executing a compiled expression and evaluating that same expression
produce the same output.
More verbosely: if, at the end of compiling and executing an expression, the stack
contains a single number, the result of evaluating the raw expression using the same
state will result in the same number.
-}
sound : (T : Set) (e : Exp T) (p : Program) (n : ‚Ñï) (œÉ : State) (k : ‚Ñï) ‚Üí
        ‚ü®‚ü® compile e ‚ü©‚ü© [] , œÉ , k ‚â° just [ n ] ‚Üí ‚ü¶ e ‚üß œÉ ‚â° just n

-- booleans
sound .ùîπ (B _) _ _ _ zero    () -- just [] ‚â° just (n ‚à∑ []) is false
sound .ùîπ (B _) _ _ _ (suc _) () -- nothing ‚â° just (n ‚à∑ []) is false

-- naturals
sound .‚Ñï (N _)       _ _        _ zero    ()          -- just [] ‚â° just n is false
sound .‚Ñï (N zero)    _ zero     _ (suc _) _    = refl -- just 0 ‚â° just 0 is trivially correct
sound .‚Ñï (N zero)    _ (suc _)  _ (suc _) ()          -- just (0 ‚à∑ []) ‚â° just (suc n ‚à∑ []) is false
sound .‚Ñï (N (suc _)) _ .(suc _) _ (suc _) refl = refl -- just (suc x) ‚â° just (suc x) is trivially correct

-- variables
sound .‚Ñï (V _) _ zero    _ zero    ()                          -- just [] ‚â° just (0 ‚à∑ []) is false
sound .‚Ñï (V x) _ zero    œÉ (suc _) _ with œÉ x
sound .‚Ñï (V _) _ zero    _ (suc _) refl | just .zero = refl    -- just 0 ‚â° just 0 is trivially correct
sound .‚Ñï (V _) _ zero    _ (suc _) ()   | nothing              -- nothing ‚â° just (0 ‚à∑ []) is false
sound .‚Ñï (V _) _ (suc _) _ zero    ()                          -- just [] ‚â° just (suc n ‚à∑ []) is false
sound .‚Ñï (V x) _ (suc _) œÉ (suc _) _ with œÉ x
sound .‚Ñï (V _) _ (suc n) _ (suc _) refl | just .(suc n) = refl -- just (suc n) ‚â° just (suc n) is trivially correct
sound .‚Ñï (V _) _ (suc _) _ (suc _) ()   | nothing              -- nothing ‚â° just (suc n ‚à∑ []) is false

--addition
sound .‚Ñï (e ‚äï e') p n œÉ k eq = {!!}

--subtraction
sound .‚Ñï (e ‚äù e‚ÇÅ) p n œÉ k eq = {!!}

--if/else
sound .‚Ñï (if_then_else e e‚ÇÅ e‚ÇÇ) p n œÉ k eq = {!!}
